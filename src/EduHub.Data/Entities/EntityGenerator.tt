<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="..\..\packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    var manager = TemplateFileManager.Create(this);
    manager.IsAutoIndentEnabled = false;
#>
<#
    // Load Schema
    var schema = LoadSchema(this.Host.ResolvePath(@"..\CASES21v56 Schema v2.xml"));
#>
<#
    // Iterate Entities
    foreach (EduHubEntity entity in schema.Entities)
    {
        // Write Entity DataSet Code
        manager.StartNewFile(string.Format(@"{0}DataSet.cs", entity.Name));
#>
using System;
using System.Data;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;

namespace EduHub.Data.Entities
{
    /// <summary>
    /// <#= entity.Description #> Data Set
    /// </summary>
    [GeneratedCode("EduHub Data", "0.9")]
    public sealed partial class <#= entity.Name #>DataSet : EduHubDataSet<<#= entity.Name #>>
    {
        /// <summary>
        /// Data Set Name
        /// </summary>
        public override string Name { get { return "<#= entity.Name #>"; } }

        internal <#= entity.Name #>DataSet(EduHubContext Context)
            : base(Context)
        {
<#
        if (entity.Indexes.Count > 0)
        {
#>
<#
            foreach (EduHubIndex index in entity.Indexes)
            {
#>
            <#= index.IndexBuilder #>;
<#
            }
#>
<#
        }
#>
        }

        /// <summary>
        /// Matches CSV file headers to actions, used to deserialize <see cref="<#= entity.Name #>" />
        /// </summary>
        /// <param name="Headers">The CSV column headers</param>
        /// <returns>An array of actions which deserialize <see cref="<#= entity.Name #>" /> fields for each CSV column header</returns>
        protected override Action<<#= entity.Name #>, string>[] BuildMapper(IReadOnlyList<string> Headers)
        {
            var mapper = new Action<<#= entity.Name #>, string>[Headers.Count];

            for (var i = 0; i < Headers.Count; i++) {
                switch (Headers[i]) {
<#
        foreach (EduHubField field in entity.Fields)
        {
#>
                    case "<#= field.Name #>":
                        mapper[i] = (e, v) => e.<#= field.Name #> = <#= field.MapperConverter #>
                        break;
<#
        }
#>
                    default:
                        mapper[i] = MapperNoOp;
                        break;
                }
            }

            return mapper;
        }

        /// <summary>
        /// Merges <see cref="<#= entity.Name #>" /> delta entities
        /// </summary>
        /// <param name="Items">Base <see cref="<#= entity.Name #>" /> items</param>
        /// <param name="DeltaItems">Delta <see cref="<#= entity.Name #>" /> items to added or update the base <see cref="<#= entity.Name #>" /> items</param>
        /// <returns>A merged list of <see cref="<#= entity.Name #>" /> items</returns>
        protected override List<<#= entity.Name #>> ApplyDeltaItems(List<<#= entity.Name #>> Items, List<<#= entity.Name #>> DeltaItems)
        {
<#
        if (entity.DeltaIndexes.Count > 0)
        {
            foreach (EduHubIndex index in entity.DeltaIndexes)
            {
#>
            <#=index.FrameworkTypeIndex #> <#=index.Name #> = Items.<#=index.IndexIndexBuilder #>;
<#
            }
#>
            HashSet<int> removeIndexes = new HashSet<int>();

            foreach (<#= entity.Name #> deltaItem in DeltaItems)
            {
                int index;

<#
            foreach (EduHubIndex index in entity.DeltaIndexes)
            {
#>
                if (<#=index.Name #>.TryGetValue(<#=index.FrameworkValueVariableBuilder("deltaItem") #>, out index))
                {
                    removeIndexes.Add(index);
                }
<#
            }
#>
            }
<#
        }
#>

            return Items
<#
        if (entity.DeltaIndexes.Count > 0)
        {
#>
                .Remove(removeIndexes)
<#
        }
#>
                .Concat(DeltaItems)
<#
        EduHubIndex clusteredIndex = entity.ClusteredIndex;
        if (clusteredIndex != null)
        {
#>
                .OrderBy(i => i.<#=clusteredIndex.Fields[0].Name #>)
<#
            foreach (EduHubField field in clusteredIndex.Fields.Skip(1))
            {
#>
                .ThenBy(i => i.<#=field.Name #>)
<#
            }
        }
#>
                .ToList();
        }
<#
        if (entity.Indexes.Count > 0)
        {
#>

        #region Index Fields

<#
        foreach (EduHubIndex index in entity.Indexes)
        {
#>
        private <#= index.FrameworkType #> <#= index.Name #>;
<#
        }
#>

        #endregion

        #region Index Methods

<#
        foreach (EduHubIndex index in entity.Indexes)
        {
#>
        /// <summary>
        /// <#= index.CommentSummary #>
        /// </summary>
<#
            foreach (EduHubField field in index.Fields)
            {
#>
        /// <param name="<#= field.Name #>"><#= field.Name #> value used to find <#= entity.Name #></param>
<#
            }
#>
        /// <returns><#= index.CommentReturns #></returns>
        /// <exception cref="ArgumentOutOfRangeException">No match was found</exception>
        public <#= index.FrameworkValueType #> FindBy<#= index.Key #>(<#= index.Parameters #>)
        {
            return <#= index.Name #>.Value[<#= index.ParametersPass #>];
        }

        /// <summary>
        /// <#= index.CommentTrySummary #>
        /// </summary>
<#
            foreach (EduHubField field in index.Fields)
            {
#>
        /// <param name="<#= field.Name #>"><#= field.Name #> value used to find <#= entity.Name #></param>
<#
            }
#>
        /// <param name="Value"><#= index.CommentReturns #></param>
        /// <returns><#= index.CommentTryReturns #></returns>
        /// <exception cref="ArgumentOutOfRangeException">No match was found</exception>
        public bool TryFindBy<#= index.Key #>(<#= index.Parameters #>, out <#= index.FrameworkValueType #> Value)
        {
            return <#= index.Name #>.Value.TryGetValue(<#= index.ParametersPass #>, out Value);
        }

        /// <summary>
        /// <#= index.CommentTrySummary #>
        /// </summary>
<#
            foreach (EduHubField field in index.Fields)
            {
#>
        /// <param name="<#= field.Name #>"><#= field.Name #> value used to find <#= entity.Name #></param>
<#
            }
#>
        /// <returns><#= index.CommentReturns #>, or null if not found</returns>
        /// <exception cref="ArgumentOutOfRangeException">No match was found</exception>
        public <#= index.FrameworkValueType #> TryFindBy<#= index.Key #>(<#= index.Parameters #>)
        {
            <#= index.FrameworkValueType #> value;
            if (<#= index.Name #>.Value.TryGetValue(<#= index.ParametersPass #>, out value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

<#
        }
#>
        #endregion
<#
        }
#>

        #region SQL Integration

        /// <summary>
        /// Returns SQL which checks for the existence of a <#= entity.Name #> table, and if not found, creates the table and associated indexes.
        /// </summary>
        protected override string GetCreateTableSql()
        {
            return @"IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[<#= entity.Name #>]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
    CREATE TABLE [dbo].[<#= entity.Name #>](
<#
        foreach (EduHubField field in entity.Fields)
        {
#>
        <#= field.SqlColumn #>,
<#
        }
        EduHubIndex primaryIndex = entity.PrimaryIndex;
        if (primaryIndex != null)
        {
#>
        CONSTRAINT [<#= entity.Name #>_<#= primaryIndex.Name #>] PRIMARY KEY <#= (primaryIndex.IsClustered ? "CLUSTERED" : "NONCLUSTERED") #> (
<#
            foreach (EduHubField field in primaryIndex.Fields.Take(primaryIndex.Fields.Count - 1))
            {
#>
            [<#= field.Name #>] ASC,
<#
            }
#>
            [<#= primaryIndex.Fields.Last().Name #>] ASC
<#
        }
#>
        )
    );
<#
        foreach (EduHubIndex index in entity.Indexes.Where(i => i != primaryIndex))
        {
#>
    CREATE <#= (index.IsClustered ? "CLUSTERED" : "NONCLUSTERED") #> INDEX [<#= entity.Name #>_<#= index.Name #>] ON [dbo].[<#= entity.Name #>]
    (
<#
            foreach (EduHubField field in index.Fields.Take(index.Fields.Count - 1))
            {
#>
            [<#= field.Name #>] ASC,
<#
            }
#>
            [<#= index.Fields.Last().Name #>] ASC
    );
<#
        }
#>
END";
        }

        /// <summary>
        /// Provides a <see cref="IDataReader"/> for the <#= entity.Name #> data set
        /// </summary>
        /// <returns>A <see cref="IDataReader"/> for the <#= entity.Name #> data set</returns>
        public override IDataReader GetDataReader()
        {
            return new <#= entity.Name #>DataReader(Items.Value);
        }

        // Modest implementation to primarily support SqlBulkCopy
        private class <#= entity.Name #>DataReader : IDataReader, IDataRecord
        {
            private List<<#= entity.Name #>> Items;
            private int CurrentIndex;
            private <#= entity.Name #> CurrentItem;

            public <#= entity.Name #>DataReader(List<<#= entity.Name #>> Items)
            {
                this.Items = Items;

                CurrentIndex = -1;
                CurrentItem = null;
            }

            public int FieldCount { get { return <#= entity.Fields.Count #>; } }
            public bool IsClosed { get { return false; } }

            public object this[string name]
            {
                get
                {
                    return GetValue(GetOrdinal(name));
                }
            }

            public object this[int i]
            {
                get
                {
                    return GetValue(i);
                }
            }

            public bool Read()
            {
                CurrentIndex++;
                if (CurrentIndex < Items.Count)
                {
                    CurrentItem = Items[CurrentIndex];
                    return true;
                }
                else
                {
                    CurrentItem = null;
                    return false;
                }
            }

            public object GetValue(int i)
            {
                switch (i)
                {
<#
        foreach (EduHubField field in entity.Fields)
        {
#>
                    case <#= entity.Fields.IndexOf(field) #>: // <#= field.Name #>
                        return CurrentItem.<#= field.Name #>;
<#
        }
#>
                    default:
                        throw new ArgumentOutOfRangeException(nameof(i));
                }
            }

            public bool IsDBNull(int i)
            {
                switch (i)
                {
<#
        foreach (EduHubField field in entity.Fields.Where(f => f.IsNullable))
        {
#>
                    case <#= entity.Fields.IndexOf(field) #>: // <#= field.Name #>
                        return CurrentItem.<#= field.Name #> == null;
<#
        }
#>
                    default:
                        return false;
                }
            }

            public string GetName(int ordinal)
            {
                switch (ordinal)
                {
<#
        foreach (EduHubField field in entity.Fields)
        {
#>
                    case <#= entity.Fields.IndexOf(field) #>: // <#= field.Name #>
                        return "<#= field.Name #>";
<#
        }
#>
                    default:
                        throw new ArgumentOutOfRangeException(nameof(ordinal));
                }
            }

            public int GetOrdinal(string name)
            {
                switch (name)
                {
<#
        foreach (EduHubField field in entity.Fields)
        {
#>
                    case "<#= field.Name #>":
                        return <#= entity.Fields.IndexOf(field) #>;
<#
        }
#>
                    default:
                        throw new ArgumentOutOfRangeException(nameof(name));
                }
            }

            public int Depth { get { throw new NotImplementedException(); } }
            public int RecordsAffected { get { throw new NotImplementedException(); } }
            public void Close() { throw new NotImplementedException(); }
            public bool GetBoolean(int ordinal) { throw new NotImplementedException(); }
            public byte GetByte(int ordinal) { throw new NotImplementedException(); }
            public long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) { throw new NotImplementedException(); }
            public char GetChar(int ordinal) { throw new NotImplementedException(); }
            public long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) { throw new NotImplementedException(); }
            public IDataReader GetData(int i) { throw new NotImplementedException(); }
            public string GetDataTypeName(int ordinal) { throw new NotImplementedException(); }
            public DateTime GetDateTime(int ordinal) { throw new NotImplementedException(); }
            public decimal GetDecimal(int ordinal) { throw new NotImplementedException(); }
            public double GetDouble(int ordinal) { throw new NotImplementedException(); }
            public Type GetFieldType(int ordinal) { throw new NotImplementedException(); }
            public float GetFloat(int ordinal) { throw new NotImplementedException(); }
            public Guid GetGuid(int ordinal) { throw new NotImplementedException(); }
            public short GetInt16(int ordinal) { throw new NotImplementedException(); }
            public int GetInt32(int ordinal) { throw new NotImplementedException(); }
            public long GetInt64(int ordinal) { throw new NotImplementedException(); }
            public string GetString(int ordinal) { throw new NotImplementedException(); }
            public int GetValues(object[] values) { throw new NotImplementedException(); }
            public bool NextResult() { throw new NotImplementedException(); }
            public DataTable GetSchemaTable() { throw new NotImplementedException(); }

            public void Dispose()
            {
                return;
            }
        }

        #endregion

    }
}
<#
        manager.EndBlock();

        // Write Entity Code
        manager.StartNewFile(string.Format(@"{0}.cs", entity.Name));
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace EduHub.Data.Entities
{
    /// <summary>
    /// <#= entity.Description #>
    /// </summary>
    [GeneratedCode("EduHub Data", "0.9")]
    public sealed partial class <#= entity.Name #> : EduHubEntity
    {

<#
        if (entity.NavigationFields.Count > 0)
        {
#>
        #region Navigation Property Cache

<#
            foreach (var field in entity.NavigationFields)
            {
                EduHubField parentField = field.ForeignParent;
                EduHubIndex index = field.ForeignParentIndex;
#>
        private <#= index.FrameworkValueType #> Cache_<#= field.Name #>_<#= parentField.Entity.Name #>;
<#
            }
#>

        #endregion

<#
        }
#>
<#
        if (entity.ForeignFields.Count > 0)
        {
#>
        #region Foreign Navigation Properties

<#
        foreach (EduHubField foreignField in entity.ForeignFields)
        {
            EduHubField field = foreignField.ForeignParent;
            EduHubIndex index = foreignField.Index;
#>
        private <#= index.FrameworkValueType #> Cache_<#= field.Name #>_<#= foreignField.Entity.Name #>_<#= foreignField.Name #>;
<#
        }
#>

        #endregion

<#
        }
#>
        #region Field Properties
<#
        foreach (EduHubField field in entity.Fields)
        {
#>

        /// <summary>
<#= field.CommentSummaryWithType #>
        /// </summary>
        public <#=field.FrameworkType#> <#=field.Name#> { get; internal set; }
<#
        }
#>

        #endregion
<#
        if (entity.NavigationFields.Count > 0)
        {
#>

        #region Navigation Properties

<#
        foreach (EduHubField field in entity.NavigationFields)
        {
            EduHubField parentField = field.ForeignParent;
            EduHubIndex index = field.ForeignParentIndex;
#>
        /// <summary>
        /// <#= parentField.Entity.Name #> (<#= parentField.Entity.Description #>) related entity by [<#= entity.Name #>.<#= field.Name #>]-&gt;[<#= parentField.Entity.Name #>.<#= parentField.Name #>]
<#= field.CommentSummary #>
        /// </summary>
        public <#= index.FrameworkValueType #> <#= field.Name #>_<#= parentField.Entity.Name #>
        {
            get
            {
<#
            if (field.IsNullable && !parentField.IsNullable)
            {
#>
                if (<#= field.Name #> == null)
                {
                    return null;
                }
<#
            }
#>
                if (Cache_<#= field.Name #>_<#= parentField.Entity.Name #> == null)
                {
                    Cache_<#= field.Name #>_<#= parentField.Entity.Name #> = Context.<#= parentField.Entity.Name #>.FindBy<#= index.Key #>(<#= field.PassExpression(parentField) #>);
                }

                return Cache_<#= field.Name #>_<#= parentField.Entity.Name #>;
            }
        }

<#
        }
#>
        #endregion
<#
        }
#>
<#
        if (entity.ForeignFields.Count > 0)
        {
#>

        #region Foreign Navigation Properties

<#
        foreach (EduHubField foreignField in entity.ForeignFields)
        {
            EduHubField field = foreignField.ForeignParent;
            EduHubIndex index = foreignField.Index;
#>
        /// <summary>
<#
            if (index.IsUnique)
            {
#>
        /// <#= foreignField.Entity.Name #> (<#= foreignField.Entity.Description #>) related entity by [<#= entity.Name #>.<#= field.Name #>]-&gt;[<#= foreignField.Entity.Name #>.<#= foreignField.Name #>]
<#
            }
            else
            {
#>
        /// <#= foreignField.Entity.Name #> (<#= foreignField.Entity.Description #>) related entities by [<#= entity.Name #>.<#= field.Name #>]-&gt;[<#= foreignField.Entity.Name #>.<#= foreignField.Name #>]
<#
            }
#>
<#= field.CommentSummary #>
        /// </summary>
        public <#= index.FrameworkValueType #> <#= field.Name #>_<#= foreignField.Entity.Name #>_<#= foreignField.Name #>
        {
            get
            {
<#
            if (field.IsNullable && !foreignField.IsNullable)
            {
#>
                if (<#= field.Name #> == null)
                {
                    return null;
                }
<#
            }
#>
                if (Cache_<#= field.Name #>_<#= foreignField.Entity.Name #>_<#= foreignField.Name #> == null &&
                    !Context.<#= foreignField.Entity.Name #>.TryFindBy<#= index.Key #>(<#= field.PassExpression(foreignField) #>, out Cache_<#= field.Name #>_<#= foreignField.Entity.Name #>_<#= foreignField.Name #>))
                {
<#
            if (index.IsUnique)
            {
#>
                    Cache_<#= field.Name #>_<#= foreignField.Entity.Name #>_<#= foreignField.Name #> = null;
<#
            }
            else
            {
#>
                    Cache_<#= field.Name #>_<#= foreignField.Entity.Name #>_<#= foreignField.Name #> = new List<<#= foreignField.Entity.Name #>>().AsReadOnly();
<#
            }
#>
                }

                return Cache_<#= field.Name #>_<#= foreignField.Entity.Name #>_<#= foreignField.Name #>;
            }
        }

<#
        }
#>
        #endregion
<#
        }
#>

    }
}
<#
        manager.EndBlock();
    }
    manager.Process(true);
#>
<#+
    public class EduHubSchema
    {
        public List<EduHubEntity> Entities;
    }

    public class EduHubEntity
    {
        public EduHubSchema Schema;

        public string Name;
        public string Description;

        public List<EduHubField> Fields;
        public List<EduHubIndex> Indexes;

        public List<EduHubField> NavigationFields
        {
            get
            {
                return Fields
                    .Where(f => f.ForeignParentKey != null)
                    .ToList();
            }
        }

        public List<EduHubField> ForeignFields
        {
            get
            {
                return Schema
                    .Entities
                    .SelectMany(e => e.Fields)
                    .Where(f => f.ForeignParentIndex != null && f.ForeignParent.Entity == this)
                    .ToList();
            }
        }

        public List<EduHubIndex> DeltaIndexes
        {
            get
            {
                return Indexes
                    .Where(i => i.IsUnique)
                    .ToList();
            }
        }

        public EduHubIndex ClusteredIndex
        {
            get
            {
                return Indexes
                    .Where(i => i.IsClustered)
                    .FirstOrDefault();
            }
        }

        public EduHubIndex PrimaryIndex
        {
            get
            {
                return Indexes
                    .Where(i => i.IsPrimary)
                    .FirstOrDefault();
            }
        }
    }

    public class EduHubField
    {
        public EduHubEntity Entity;

        public string Name;
        public string Description;

        public string Type;
        public string TypeDescription;
        public int TypeMaxLength;

        public string SqlType;

        public bool IsKey;
        public bool IsNullable;
        public bool IsIdentity;

        public string ForeignParentKey;

        public string FrameworkType
        {
            get
            {
                if (Type == "string" || Type == "byte[]")
                    return Type;
                if (!IsNullable)
                    return Type;
                else
                    return string.Format("{0}?", Type);
            }
        }

        public EduHubField ForeignParent
        {
            get
            {
                if (ForeignParentKey == null)
                {
                    return null;
                }
                else
                {
                    var entityName = ForeignParentKey.Substring(0, ForeignParentKey.IndexOf(':'));
                    var fieldName = ForeignParentKey.Substring(ForeignParentKey.IndexOf(':') + 1);

                    return Entity.Schema.Entities.First(e => e.Name == entityName).Fields.First(f => f.Name == fieldName);
                }
            }
        }

        public EduHubIndex ForeignParentIndex
        {
            get
            {
                if (ForeignParentKey == null)
                {
                    return null;
                }
                else
                {
                    return ForeignParent.Index;
                }
            }
        }

        public EduHubIndex Index
        {
            get
            {
                return Entity.Indexes.FirstOrDefault(i => i.Fields.Count == 1 && i.Fields[0] == this);
            }
        }

        public string PassExpression(EduHubField CompareField)
        {
            if (!CompareField.FrameworkType.EndsWith("?") && FrameworkType.EndsWith("?"))
            {
                return string.Format("{0}.Value", Name);
            }
            else
            {
                return Name;
            }
        }

        public string CommentSummaryWithType
        {
            get
            {
                StringBuilder builder = new StringBuilder();
                if (Description.Length == 0)
                {
                    builder.AppendLine("        /// &lt;No documentation available&gt;");
                }
                else
                {
                    foreach (var descriptionLine in Description.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        builder.Append("        /// ").AppendLine(descriptionLine);
                    }
                }
                if (Type == "string")
                {
                    if (TypeMaxLength == 0)
                    {
                        builder.Append("        /// [").Append(TypeDescription).Append("]");
                    }
                    else
                    {
                        builder.Append("        /// [").Append(TypeDescription).Append(" (").Append(TypeMaxLength).Append(")]");
                    }
                }
                return builder.ToString().TrimEnd();
            }
        }

        public string CommentSummary
        {
            get
            {
                StringBuilder builder = new StringBuilder();
                if (Description.Length == 0)
                {
                    builder.AppendLine("        /// &lt;No documentation available&gt;");
                }
                else
                {
                    foreach (var descriptionLine in Description.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        builder.Append("        /// ").AppendLine(descriptionLine);
                    }
                }
                return builder.ToString().TrimEnd();
            }
        }

        public string SqlColumn
        {
            get
            {
                StringBuilder builder = new StringBuilder();
                builder.Append("[").Append(Name).Append("] ");
                builder.Append(SqlType);
                if (TypeMaxLength > 0)
                {
                    builder.Append("(").Append(TypeMaxLength).Append(")");
                }
                if (IsIdentity)
                {
                    builder.Append(" IDENTITY");
                }
                if (IsNullable)
                {
                    builder.Append(" NULL");
                }
                else
                {
                    builder.Append(" NOT NULL");
                }
                return builder.ToString();
            }
        }

        public string MapperConverter
        {
            get
            {
                if (Type == "string")
                {
                    return "v;";
                }
                if (Type == "byte[]")
                {
                    return "null; // eduHub is not encoding byte arrays";
                }
                if (IsNullable)
                {
                    switch (Type)
                    {
                        case "int":
                            return "v == null ? (int?)null : int.Parse(v);";
                        case "short":
                            return "v == null ? (short?)null : short.Parse(v);";
                        case "decimal":
                            return "v == null ? (decimal?)null : decimal.Parse(v);";
                        case "double":
                            return "v == null ? (double?)null : double.Parse(v);";
                        case "DateTime":
                            return "v == null ? (DateTime?)null : DateTime.Parse(v);";
                    }
                }
                else
                {
                    switch (Type)
                    {
                        case "int":
                            return "int.Parse(v);";
                        case "short":
                            return "short.Parse(v);";
                        case "decimal":
                            return "decimal.Parse(v);";
                        case "double":
                            return "double.Parse(v);";
                        case "DateTime":
                            return "DateTime.Parse(v);";
                    }
                }
                throw new ArgumentException("Unsupported Type: " + Type);
            }
        }
    }

    public class EduHubIndex
    {
        public EduHubEntity Entity;

        public string Name;

        public List<EduHubField> Fields;

        public bool IsPrimary;
        public bool IsUnique;
        public bool IsClustered;

        public string Key
        {
            get
            {
                return string.Join("_", Fields.Select(f => f.Name));
            }
        }

        public string FrameworkKeyType
        {
            get
            {
                if (Fields.Count == 1)
                {
                    return Fields[0].FrameworkType;
                }
                else
                {
                    return string.Format("Tuple<{0}>", string.Join(", ", Fields.Select(f => f.FrameworkType)));
                }
            }
        }

        public bool FrameworkKeyNullable
        {
            get
            {
                return Fields.Count == 1 && Fields[0].IsNullable;
            }
        }

        public string FrameworkValueType
        {
            get
            {
                return IsUnique ? Entity.Name : string.Format("IReadOnlyList<{0}>", Entity.Name);
            }
        }

        public string FrameworkValueBuilder
        {
            get
            {
                if (Fields.Count == 1)
                {
                    return string.Format("i => i.{0}", Fields[0].Name);
                }
                else
                {
                    return string.Format("i => Tuple.Create({0})", string.Join(", ", Fields.Select(f => string.Format("i.{0}", f.Name))));
                }
            }
        }

        public string FrameworkValueVariableBuilder(string VariableName)
        {
            if (Fields.Count == 1)
            {
                return string.Format("{0}.{1}", VariableName, Fields[0].Name);
            }
            else
            {
                return string.Format("Tuple.Create({0})", string.Join(", ", Fields.Select(f => string.Format("{0}.{1}", VariableName, f.Name))));
            }
        }

        public string FrameworkType
        {
            get
            {
                return string.Format("Lazy<{0}<{1}, {2}>>",
                    FrameworkKeyNullable ? "NullDictionary" : "Dictionary",
                    FrameworkKeyType,
                    FrameworkValueType);
            }
        }

        public string FrameworkTypeIndex
        {
            get
            {
                return string.Format("{0}<{1}, int>",
                    FrameworkKeyNullable ? "NullDictionary" : "Dictionary",
                    FrameworkKeyType);
            }
        }

        public string IndexIndexBuilder
        {
            get
            {
                return string.Format("ToIndex{0}Dictionary({1})",
                    FrameworkKeyNullable ? "Null" : null,
                    FrameworkValueBuilder);
            }
        }

        public string IndexBuilder
        {
            get
            {
                return string.Format("{0} = new {1}(() => this.To{2}{3}Dictionary({4}))",
                    Name,
                    FrameworkType,
                    IsUnique ? null : "Grouped",
                    FrameworkKeyNullable ? "Null" : null,
                    FrameworkValueBuilder);
            }
        }

        public string Parameters
        {
            get
            {
                return string.Join(", ", Fields.Select(f => string.Format("{0} {1}", f.FrameworkType, f.Name)));
            }
        }

        public string ParametersPass
        {
            get
            {
                if (Fields.Count == 1)
                {
                    return Fields[0].Name;
                }
                else
                {
                    return string.Format("Tuple.Create({0})", string.Join(", ", Fields.Select(f => f.Name)));
                }
            }
        }

        public string CommentSummary
        {
            get
            {
                if (Fields.Count == 1)
                {
                    return string.Format("Find {0} by {1} field", Entity.Name, Fields[0].Name);
                }
                else
                {
                    return string.Format("Find {0} by {1} and {2} fields",
                        Entity.Name,
                        string.Join(", ", Fields.Take(Fields.Count - 1).Select(f => f.Name)),
                        Fields.Last().Name);
                }
            }
        }

        public string CommentTrySummary
        {
            get
            {
                if (Fields.Count == 1)
                {
                    return string.Format("Attempt to find {0} by {1} field", Entity.Name, Fields[0].Name);
                }
                else
                {
                    return string.Format("Attempt to find {0} by {1} and {2} fields",
                        Entity.Name,
                        string.Join(", ", Fields.Take(Fields.Count - 1).Select(f => f.Name)),
                        Fields.Last().Name);
                }
            }
        }

        public string CommentReturns
        {
            get
            {
                if (IsUnique)
                {
                    return string.Format("Related {0} entity", Entity.Name);
                }
                else
                {
                    return string.Format("List of related {0} entities", Entity.Name);
                }
            }
        }

        public string CommentTryReturns
        {
            get
            {
                if (IsUnique)
                {
                    return string.Format("True if the related {0} entity is found", Entity.Name);
                }
                else
                {
                    return string.Format("True if the list of related {0} entities is found", Entity.Name);
                }
            }
        }
    }

    static EduHubSchema LoadSchema(string Filename)
    {
        var schema = new EduHubSchema();

        schema.Entities = XElement.Load(Filename)
            .Elements("Entity")
            .Select(e => {
                var entity = new EduHubEntity() {
                    Schema = schema,
                    Name = e.Attribute("Name").Value,
                    Description = e.Attribute("Description").Value.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;")
                };
                // Load Fields
                entity.Fields = e.Element("Fields").Elements("Field").Select(f => new EduHubField() {
                    Entity = entity,
                    Name = f.Attribute("Name").Value,
                    Description = f.Value.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;"),
                    Type = f.Attribute("Type").Value,
                    TypeDescription = f.Attribute("TypeDescription").Value,
                    TypeMaxLength = f.Attribute("TypeMaxLength") == null ? 0 : int.Parse(f.Attribute("TypeMaxLength").Value),
                    SqlType = f.Attribute("SqlType").Value,
                    IsKey = bool.Parse(f.Attribute("IsKey").Value),
                    IsNullable = bool.Parse(f.Attribute("IsNullable").Value),
                    IsIdentity = bool.Parse(f.Attribute("IsIdentity").Value),
                    ForeignParentKey = f.Attribute("ForeignParent") == null ? null : f.Attribute("ForeignParent").Value
                }).ToList();
                // Load Indexes
                entity.Indexes = e.Element("Indexes").Elements("Index").Select(i => new EduHubIndex() {
                    Entity = entity,
                    Name = i.Attribute("Name").Value,
                    IsPrimary = bool.Parse(i.Attribute("IsPrimary").Value),
                    IsUnique = bool.Parse(i.Attribute("IsUnique").Value),
                    IsClustered = bool.Parse(i.Attribute("IsClustered").Value),
                    Fields = i.Elements("Field").Select(fn => entity.Fields.First(f => f.Name == fn.Value)).ToList()
                }).ToList();
                return entity;
            }).ToList();

        return schema;
    }
#>