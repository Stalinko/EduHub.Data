<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="..\..\packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    var manager = TemplateFileManager.Create(this);
    manager.IsAutoIndentEnabled = false;
    var schema = RetrieveEntitiesFromSchema(this.Host.ResolvePath(@"..\CASES21v55 Schema.xml"));
    foreach (var entity in schema)
    {
        manager.StartNewFile(string.Format(@"{0}DataSet.cs", entity.Name));
        #>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace EduHub.Data.Entities
{
    /// <summary>
    /// <#= entity.Description #> Data Set
    /// </summary>
    public sealed class <#= entity.Name #>DataSet : SetBase<<#= entity.Name #>>
    {
<#
        foreach (var field in entity.Fields.Where(f => f.IsKey))
        {
#>
        private Lazy<Dictionary<<#= field.TypeName #>, <#= entity.Name #>>> <#= field.Name #>Index;
<#
        }
#>

        internal <#= entity.Name #>DataSet(EduHubContext Context)
            : base(Context)
        {
<#
        foreach (var field in entity.Fields.Where(f => f.IsKey))
        {
#>
            <#= field.Name #>Index = new Lazy<Dictionary<<#= field.TypeName #>, <#= entity.Name #>>>(() => this.ToDictionary(e => e.<#= field.Name #>));
<#
        }
#>
        }

        /// <summary>
        /// Data Set Name
        /// </summary>
        public override string Name { get { return "<#= entity.Name #>"; } }

<#
        foreach (var field in entity.Fields.Where(f => f.IsKey))
        {
#>
        /// <summary>
        /// Find <#= entity.Name #> by <#= field.Name #> key field
        /// </summary>
        /// <param name="Key"><#= field.Name #> value used to find <#= entity.Name #></param>
        /// <returns>Related <#= entity.Name #> entity</returns>
        /// <exception cref="ArgumentOutOfRangeException"><#= field.Name #> value didn't match any <#= entity.Name #> entities</exception>
        public <#= entity.Name #> FindBy<#= field.Name #>(<#= field.TypeName #> Key)
        {
            <#= entity.Name #> result;
            if (<#= field.Name #>Index.Value.TryGetValue(Key, out result))
            {
                return result;
            }
            else
            {
                throw new ArgumentOutOfRangeException("Key");
            }
        }

        /// <summary>
        /// Attempt to find <#= entity.Name #> by <#= field.Name #> key field
        /// </summary>
        /// <param name="Key"><#= field.Name #> value used to find <#= entity.Name #></param>
        /// <param name="Value">Related <#= entity.Name #> entity</param>
        /// <returns>True if the <#= entity.Name #> entity is found</returns>
        public bool TryFindBy<#= field.Name #>(<#= field.TypeName #> Key, out <#= entity.Name #> Value)
        {
            return <#= field.Name #>Index.Value.TryGetValue(Key, out Value);
        }

        /// <summary>
        /// Attempt to find <#= entity.Name #> by <#= field.Name #> key field
        /// </summary>
        /// <param name="Key"><#= field.Name #> value used to find <#= entity.Name #></param>
        /// <returns>Related <#= entity.Name #> entity, or null if not found</returns>
        public <#= entity.Name #> TryFindBy<#= field.Name #>(<#= field.TypeName #> Key)
        {
            <#= entity.Name #> result;
            if (<#= field.Name #>Index.Value.TryGetValue(Key, out result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }

<#
        }
#>

        /// <summary>
        /// Matches CSV file headers to actions, used to deserialize <see cref="<#= entity.Name #>" />
        /// </summary>
        /// <param name="Headers">The CSV column headers</param>
        /// <returns>An array of actions which deserialize <see cref="<#= entity.Name #>" /> fields for each CSV column header</returns>
        protected override Action<<#= entity.Name #>, string>[] BuildMapper(IReadOnlyList<string> Headers)
        {
            var mapper = new Action<<#= entity.Name #>, string>[Headers.Count];

            for (var i = 0; i < Headers.Count; i++) {
                switch (Headers[i]) {
<#
        foreach (var field in entity.Fields)
        {
#>
                    case "<#= field.Name #>":
                        mapper[i] = (e, v) => e.<#= field.Name #> = <#= DetermineMapperConversion(field.TypeName) #>
                        break;
<#
        }
#>
                    default:
                        mapper[i] = MapperNoOp;
                        break;
                }
            }

            return mapper;
        }
    }
}
<#
        manager.EndBlock();
        manager.StartNewFile(string.Format(@"{0}.cs", entity.Name));
        #>
using System;
using System.Collections.Generic;

namespace EduHub.Data.Entities
{
    /// <summary>
    /// <#= entity.Description #>
    /// </summary>
    public class <#= entity.Name #> : EntityBase
    {
#region Navigation Property Cache
<#
        foreach (var field in entity.Fields.Where(f => f.RelationshipEntity != null))
        {
#>
        private <#=field.RelationshipEntity#> _<#=field.Name#>_<#=field.RelationshipEntity#>;
<#
        }
#>
#endregion

#region Field Properties
<#
        foreach (var field in entity.Fields)
        {
#>
        /// <summary>
<#=string.Join(Environment.NewLine, field.Description.Split('\n').Select(d => "        /// " + d.Trim())) #>
<# if (field.TypeName == "string") { #>        /// [<#=field.TypeDescription#><# if (field.TypePrecision != 0) { #> (<#=field.TypePrecision#>)<#}#>]
<#} #>
        /// </summary>
        public <#=field.TypeName#> <#=field.Name#> { get; internal set; }
<#
        }
#>
#endregion

#region Navigation Properties
<#
        foreach (var field in entity.Fields.Where(f => f.RelationshipEntity != null))
        {
#>
        /// <summary>
        /// Navigation property for [<#=field.Name#>] => [<#=field.RelationshipEntity#>].[<#=field.RelationshipField#>]
<#=string.Join(Environment.NewLine, field.Description.Split('\n').Select(d => "        /// " + d.Trim()))#>
        /// </summary>
        public <#=field.RelationshipEntity#> <#=field.Name#>_<#=field.RelationshipEntity#> {
            get
            {
<#=DetermineNavigationPropertyContent(field)#>
            }
        }
<#
        }
#>
#endregion
    }
}
<#
        manager.EndBlock();
    }
    manager.Process(true);
#><#+
    public class C7Entity
    {
        public string Name;
        public string Description;
        public List<C7Field> Fields;
    }

    public class C7Field
    {
        public string Name;
        public string TypeKey;
        public string Type;
        public string TypeName;
        public string TypeDescription;
        public int TypePrecision;
        public bool IsKey;
        public string Description;
        public string RelationshipEntity;
        public string RelationshipField;
    }

    static string DetermineMapperConversion(string TypeName)
    {
        switch (TypeName)
        {
            case "string":
                return "v;";
            case "int":
                return "int.Parse(v);";
            case "int?":
                return "v == null ? (int?)null : int.Parse(v);";
            case "short":
                return "short.Parse(v);";
            case "short?":
                return "v == null ? (short?)null : short.Parse(v);";
            case "decimal":
                return "decimal.Parse(v);";
            case "decimal?":
                return "v == null ? (decimal?)null : decimal.Parse(v);";
            case "double":
                return "double.Parse(v);";
            case "double?":
                return "v == null ? (double?)null : double.Parse(v);";
            case "DateTime":
                return "DateTime.Parse(v);";
            case "DateTime?":
                return "v == null ? (DateTime?)null : DateTime.Parse(v);";
            case "byte[]":
                return "null; // eduHub is not encoding byte arrays";
            default:
                throw new ArgumentException("Unsupported Type: " + TypeName);
        }
    }

    static string DetermineNavigationPropertyContent(C7Field Field)
    {
        StringBuilder content = new StringBuilder();

        if (Field.TypeName.EndsWith("?")) // Nullable Type
        {
            content
                .Append("                ").AppendLine(string.Format("if ({0}.HasValue)", Field.Name))
                .Append("                ").AppendLine("{")
                .Append("                ").AppendLine(string.Format("    if (_{0}_{1} == null)", Field.Name, Field.RelationshipEntity))
                .Append("                ").AppendLine("    {")
                .Append("                ").AppendLine(string.Format("        _{0}_{1} = Context.{1}.FindBy{2}({0}.Value);", Field.Name, Field.RelationshipEntity, Field.RelationshipField))
                .Append("                ").AppendLine("    }")
                .Append("                ").AppendLine(string.Format("    return _{0}_{1};", Field.Name, Field.RelationshipEntity))
                .Append("                ").AppendLine("}")
                .Append("                ").AppendLine("else")
                .Append("                ").AppendLine("{")
                .Append("                ").AppendLine("    return null;")
                .Append("                ").Append("}");
        }
        else if (Field.TypeName == "string") // String Reference Type
        {
            content
                .Append("                ").AppendLine(string.Format("if ({0} != null)", Field.Name))
                .Append("                ").AppendLine("{")
                .Append("                ").AppendLine(string.Format("    if (_{0}_{1} == null)", Field.Name, Field.RelationshipEntity))
                .Append("                ").AppendLine("    {")
                .Append("                ").AppendLine(string.Format("        _{0}_{1} = Context.{1}.FindBy{2}({0});", Field.Name, Field.RelationshipEntity, Field.RelationshipField))
                .Append("                ").AppendLine("    }")
                .Append("                ").AppendLine(string.Format("    return _{0}_{1};", Field.Name, Field.RelationshipEntity))
                .Append("                ").AppendLine("}")
                .Append("                ").AppendLine("else")
                .Append("                ").AppendLine("{")
                .Append("                ").AppendLine("    return null;")
                .Append("                ").Append("}");
        }
        else // Others
        {
            content
                .Append("                ").AppendLine(string.Format("if (_{0}_{1} != null)", Field.Name, Field.RelationshipEntity))
                .Append("                ").AppendLine("{")
                .Append("                ").AppendLine(string.Format("    _{0}_{1} = Context.{1}.FindBy{2}({0});", Field.Name, Field.RelationshipEntity, Field.RelationshipField))
                .Append("                ").AppendLine("}")
                .Append("                ").Append(string.Format("return _{0}_{1};", Field.Name, Field.RelationshipEntity));
        }

        return content.ToString();
    }

    static IEnumerable<C7Entity> RetrieveEntitiesFromSchema(string Filename)
    {
        return XElement.Load(Filename)
            .Elements("Element")
            .Select(e => new C7Entity()
            {
                Name = e.Attribute("Name").Value,
                Description = e.Attribute("Description").Value.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;"),
                Fields = e.Elements("Field").Select(f => new C7Field()
                {
                    Name = f.Attribute("Name").Value,
                    TypeKey = f.Attribute("TypeKey").Value,
                    Type = f.Attribute("Type").Value,
                    TypeName = f.Attribute("TypeName").Value,
                    TypeDescription = f.Attribute("TypeDescription").Value,
                    TypePrecision = int.Parse(f.Attribute("TypePrecision").Value),
                    IsKey = bool.Parse(f.Attribute("IsKey").Value),
                    RelationshipEntity = f.Attribute("RelationshipEntity") == null ? null : f.Attribute("RelationshipEntity").Value,
                    RelationshipField = f.Attribute("RelationshipField") == null ? null : f.Attribute("RelationshipField").Value,
                    Description = f.Value.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;")
                }).ToList()
            }).ToList();
    }

    const string dbColumnsSql =
@"SELECT t.TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.IS_NULLABLE
    FROM INFORMATION_SCHEMA.TABLES t
        JOIN INFORMATION_SCHEMA.COLUMNS c ON c.TABLE_SCHEMA=t.TABLE_SCHEMA AND c.TABLE_CATALOG=t.TABLE_CATALOG AND c.TABLE_NAME=t.TABLE_NAME
WHERE
    t.TABLE_TYPE='BASE TABLE' AND
    NOT t.TABLE_NAME LIKE 'CAZSYS_%'
ORDER BY t.TABLE_NAME, c.ORDINAL_POSITION";

    static IEnumerable<C7Entity> RetrieveTablesFromDatabase()
    {
        return RetrieveColumnsFromDatabase()
            .GroupBy(c => c.Item1)
            .Select(g => new C7Entity()
            {
                Name = g.Key,
                Fields = g.Select(i => i.Item2).ToList()
            });
    }

    static IEnumerable<Tuple<string, C7Field>> RetrieveColumnsFromDatabase()
    {
        using (var dbConnection = new SqlConnection("Data Source=(local);Initial Catalog=C21CLONE;Integrated Security=True;MultipleActiveResultSets=True"))
        {
            dbConnection.Open();
            using (var dbCommand = new SqlCommand(dbColumnsSql, dbConnection))
            {
                using (var dbReader = dbCommand.ExecuteReader())
                {
                    while (dbReader.Read())
                    {
                        yield return Tuple.Create(dbReader.GetString(0), new C7Field()
                        {
                            Name = dbReader.GetString(1),
                            TypeDescription = dbReader.GetString(2)
                        });
                    }
                }
            }
            dbConnection.Close();
        }
    }
#>